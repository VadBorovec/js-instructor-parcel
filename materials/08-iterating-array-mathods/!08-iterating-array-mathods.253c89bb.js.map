{"mappings":"AAgBe,CACb,CAAEA,GAAI,MAAOC,MAAO,EAAGC,KAAM,CAAC,KAAM,WACpC,CAAEF,GAAI,MAAOC,MAAO,EAAGC,KAAM,CAAC,OAAQ,QACtC,CAAEF,GAAI,MAAOC,MAAO,GAAIC,KAAM,CAAC,OAAQ,KAAM,WAC7C,CAAEF,GAAI,MAAOC,MAAO,EAAGC,KAAM,CAAC,MAAO,UACrC,CAAEF,GAAI,MAAOC,MAAO,EAAGC,KAAM,CAAC,KAAM,SAAU,WAyB7CC,SAAQC,GAAOA,EAAIF,OACnBG,QACC,CAACC,EAAKC,KAAS,IACVD,EACHC,CAACA,GAAMD,EAAIC,GAAOD,EAAIC,GAAO,EAAI,KAEnC","sources":["src/materials/08-iterating-array-mathods/09-flat.js"],"sourcesContent":["// Array.prototype.flat(depth)\n// - Разглаживает массив до указанной глубины\n// - По умолчанию глубина 1\n\nconst array = [1, 2, [4, [5]], [6, [7, 8, [9]]]];\n\n// console.log(array);\n// console.log(array.flat());\n// console.log(array.flat(2));\n// console.log(array.flat(3));\n\n// ================================================================\n\n// Array.prototype.flatMap(callback)\n//  - Комбинация map + flat\n\nconst tweets = [\n  { id: '000', likes: 5, tags: ['js', 'nodejs'] },\n  { id: '001', likes: 2, tags: ['html', 'css'] },\n  { id: '002', likes: 17, tags: ['html', 'js', 'nodejs'] },\n  { id: '003', likes: 8, tags: ['css', 'react'] },\n  { id: '004', likes: 0, tags: ['js', 'nodejs', 'react'] },\n];\n\n// console.table(tweets);\n\n// With REDUCE\n// const tags = tweets.reduce((acc, tweet) => [...acc, ...tweet.tags], []);\n\n// With MAP & FLAT\n// const tags = tweets.map(obj => obj.tags).flat();\n\n// // Refact\n// const tags = tweets.flatMap(obj => obj.tags);\n\n// console.log(tags);\n\n// const stats = tags.reduce((acc, tag) => {\n//   return {\n//     ...acc,\n//     [tag]: acc[tag] ? acc[tag] + 1 : 1,\n//   };\n// }, {});\n\n// // Refact\nconst stats = tweets\n  .flatMap(obj => obj.tags)\n  .reduce(\n    (acc, tag) => ({\n      ...acc,\n      [tag]: acc[tag] ? acc[tag] + 1 : 1,\n    }),\n    {}\n  );\n\n// console.log(stats);\n"],"names":["id","likes","tags","flatMap","obj","reduce","acc","tag"],"version":3,"file":"!08-iterating-array-mathods.253c89bb.js.map"}