{"mappings":"AAIoD,MAA9CA,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,GAgCV,IAAIA,GACZC,OACU,IAAID,GAASC,MAAK,CAACC,EAAGC,IAAMA,EAAID,IAArD,MAWME,EAAU,CACd,CAAEC,GAAI,WAAYC,KAAM,QAASC,WAAY,IAAKC,QAAQ,GAC1D,CAAEH,GAAI,WAAYC,KAAM,OAAQC,WAAY,IAAKC,QAAQ,GACzD,CAAEH,GAAI,WAAYC,KAAM,OAAQC,WAAY,IAAKC,QAAQ,GACzD,CAAEH,GAAI,WAAYC,KAAM,OAAQC,WAAY,IAAKC,QAAQ,GACzD,CAAEH,GAAI,WAAYC,KAAM,UAAWC,WAAY,GAAIC,QAAQ,IAMlC,IAAIJ,GAASH,MACtC,CAACQ,EAAYC,IAAeA,EAAWH,WAAaE,EAAWF,aAIpC,IAAIH,GAASH,MACxC,CAACQ,EAAYC,IAAeD,EAAWF,WAAaG,EAAWH,aAM5C,IAAIH,GAASH,MAAK,CAACQ,EAAYC,IACnCD,EAAWH,KAAK,GAAKI,EAAWJ,KAAK,GAG3C,GAEF","sources":["src/materials/08-iterating-array-mathods/07-sort.js"],"sourcesContent":["// Array.prototype.sort(callback(currentEl, nextEl){})\n// - Сортирует и ИЗМЕНЯЕТ оригинальный массив\n// - По умолчанию приводит элементы K строке и сортирует по !юникоду!\n\nconst numbers = [1, 9, 6, 2, 3];\n// numbers.sort();\n// console.log(numbers);\n\nconst letters = ['b', 'B', 'a', 'A'];\n// letters.sort();\n// console.log(letters);\n\n// compareFunction - функция сравнения (callback)\n// Элементы массива сортируются В соответствии C её возвращаемым значением\n// - если compareFunction(A, B) меньше 0, сортировка поставит A перед В\n// - если compareFunction(A, B) больше 0, сортировка поставит В перед A\n// - если compareFunction(A, B) вернёт 0, сортировка оставит A и В на\n// неизменными по отношению друг K другу, но отсортирует их по отношению KO всем\n// другим элементам,\n\n// // По возрастанию\n// numbers.sort((curEl, nextEl) => {\n//   return curEl - nextEl;\n// });\n\n// // По убыванию\n// numbers.sort((curEl, nextEl) => {\n//   return nextEl - curEl;\n// });\n\n// console.log(numbers);\n\n// Как сделать копию массива чтобы не сортировать оригинальный\n// - Array.prototype.slice()\n// - Operation spread\n\nconst copySortUp = [...numbers];\ncopySortUp.sort();\nconst copySortDown = [...numbers].sort((a, b) => b - a);\n\n// console.log('numbers', numbers);\n// console.log('copySortUp', copySortUp);\n// console.log('copySortDown', copySortDown);\n\n// OR\n// console.log([1, 2, 3, 4, 5].reverse());\n\n// Кастомная сортировка сложных типов\n\nconst players = [\n  { id: 'player-1', name: 'Mango', timePlayed: 310, online: false },\n  { id: 'player-2', name: 'Poly', timePlayed: 470, online: true },\n  { id: 'player-3', name: 'Kiwi', timePlayed: 230, online: true },\n  { id: 'player-4', name: 'Ajax', timePlayed: 150, online: false },\n  { id: 'player-5', name: 'Chelsey', timePlayed: 80, online: true },\n];\n// console.table(players);\n\n// По игровому времени\n\nconst sortedByTopPlayers = [...players].sort(\n  (prevPlayer, nextPlayer) => nextPlayer.timePlayed - prevPlayer.timePlayed\n);\n// console.table(sortedByTopPlayers);\n\nconst sortedByWorstPlayers = [...players].sort(\n  (prevPlayer, nextPlayer) => prevPlayer.timePlayed - nextPlayer.timePlayed\n);\n// console.table(sortedByWorstPlayers);\n\n// Sort by NAME\n\nconst sortedByName = [...players].sort((prevPlayer, nextPlayer) => {\n  const result = prevPlayer.name[0] > nextPlayer.name[0];\n\n  if (result) {\n    return 1;\n  }\n  return -1;\n});\n\n// console.table(sortedByName);\n"],"names":["$959fbe27dddff728$var$numbers","sort","a","b","$959fbe27dddff728$var$players","id","name","timePlayed","online","prevPlayer","nextPlayer"],"version":3,"file":"!08-iterating-array-mathods.0315d01e.js.map"}